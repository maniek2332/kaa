# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- azure-pipelines

pool:
  vmImage: 'ubuntu-16.04'
strategy:
  matrix:
    # Python36:
    #   python.version: '3.6'
    Python37:
      python.version: '3.7'
      python.version_tag: 'py37'
    # Python38:
    #   python.version: '3.8'

variables:
  docker_image: "quay.io/pypa/manylinux2010_x86_64"
  docker_image_ref: "@sha256:d41631c7360a0028876755aebb7036db639c24e7dcdaf3a9e6dcc0e74a681541"

jobs:
- job: build
  displayName: 'Build phase'
  pool:
    vmImage: 'ubuntu-16.04'
  strategy:
    matrix:
      # Python36:
      #   python.version: '3.6'
      Python37:
        python.version: '3.7'
        python.version_tag: 'py37'
      Python38:
        python.version: '3.8'
        python.version_tag: 'py38'
  steps:
  - checkout: self

  - script: git submodule update --init --recursive
    displayName: 'Fetch submodules'

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: 'Use Python $(python.version)'

  - bash: |
      VERSION=`python -c "import versioneer; print(versioneer.get_versions()['version'])"`
      echo $VERSION
      echo "##vso[task.setvariable variable=dist_version]$VERSION"
    displayName: 'Getting version string'

  - task: DockerInstaller@0
    displayName: Docker Installer
    inputs:
      dockerVersion: 17.09.0-ce
      releaseType: stable

  - script: |
      touch _build_version.py
      python -c 'import versioneer; versioneer.write_to_version_file("_build_version.py", versioneer.get_versions())'
      sudo docker pull $(docker_image)
      sudo docker run -v $(System.DefaultWorkingDirectory):/host $(docker_image) \
        /bin/bash /host/scripts/docker_wheel_builder.sh $(python.version_tag)
    displayName: 'Wheel build manylinux2010'

  - script: ls dist/
    displayName: 'List wheels'

  - publish: dist/
    artifact: "build_linux_$(python.version_tag)"

- job: upload
  displayName: 'Upload phase'
  dependsOn:
  - build
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - script: mkdir dist/
  - download: current
    path: dist/
  - script: ls dist/
